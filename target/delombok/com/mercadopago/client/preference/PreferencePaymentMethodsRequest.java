// Generated by delombok at Fri Aug 26 19:04:59 CDT 2022
package com.mercadopago.client.preference;

import java.util.List;

/**
 * Payment methods information from preference.
 */
public class PreferencePaymentMethodsRequest {
  /**
   * Payment methods not allowed in payment process (except account_money).
   */
  private final List<PreferencePaymentMethodRequest> excludedPaymentMethods;
  /**
   * Payment types not allowed in payment process.
   */
  private final List<PreferencePaymentTypeRequest> excludedPaymentTypes;
  /**
   * Payment method to be preferred on the payments methods list.
   */
  private final String defaultPaymentMethodId;
  /**
   * Maximum number of credit card installments to be accepted.
   */
  private final Integer installments;
  /**
   * Preferred number of credit card installments.
   */
  private final Integer defaultInstallments;

  @java.lang.SuppressWarnings("all")
  PreferencePaymentMethodsRequest(final List<PreferencePaymentMethodRequest> excludedPaymentMethods, final List<PreferencePaymentTypeRequest> excludedPaymentTypes, final String defaultPaymentMethodId, final Integer installments, final Integer defaultInstallments) {
    this.excludedPaymentMethods = excludedPaymentMethods;
    this.excludedPaymentTypes = excludedPaymentTypes;
    this.defaultPaymentMethodId = defaultPaymentMethodId;
    this.installments = installments;
    this.defaultInstallments = defaultInstallments;
  }


  @java.lang.SuppressWarnings("all")
  public static class PreferencePaymentMethodsRequestBuilder {
    @java.lang.SuppressWarnings("all")
    private List<PreferencePaymentMethodRequest> excludedPaymentMethods;
    @java.lang.SuppressWarnings("all")
    private List<PreferencePaymentTypeRequest> excludedPaymentTypes;
    @java.lang.SuppressWarnings("all")
    private String defaultPaymentMethodId;
    @java.lang.SuppressWarnings("all")
    private Integer installments;
    @java.lang.SuppressWarnings("all")
    private Integer defaultInstallments;

    @java.lang.SuppressWarnings("all")
    PreferencePaymentMethodsRequestBuilder() {
    }

    /**
     * Payment methods not allowed in payment process (except account_money).
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferencePaymentMethodsRequest.PreferencePaymentMethodsRequestBuilder excludedPaymentMethods(final List<PreferencePaymentMethodRequest> excludedPaymentMethods) {
      this.excludedPaymentMethods = excludedPaymentMethods;
      return this;
    }

    /**
     * Payment types not allowed in payment process.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferencePaymentMethodsRequest.PreferencePaymentMethodsRequestBuilder excludedPaymentTypes(final List<PreferencePaymentTypeRequest> excludedPaymentTypes) {
      this.excludedPaymentTypes = excludedPaymentTypes;
      return this;
    }

    /**
     * Payment method to be preferred on the payments methods list.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferencePaymentMethodsRequest.PreferencePaymentMethodsRequestBuilder defaultPaymentMethodId(final String defaultPaymentMethodId) {
      this.defaultPaymentMethodId = defaultPaymentMethodId;
      return this;
    }

    /**
     * Maximum number of credit card installments to be accepted.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferencePaymentMethodsRequest.PreferencePaymentMethodsRequestBuilder installments(final Integer installments) {
      this.installments = installments;
      return this;
    }

    /**
     * Preferred number of credit card installments.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferencePaymentMethodsRequest.PreferencePaymentMethodsRequestBuilder defaultInstallments(final Integer defaultInstallments) {
      this.defaultInstallments = defaultInstallments;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PreferencePaymentMethodsRequest build() {
      return new PreferencePaymentMethodsRequest(this.excludedPaymentMethods, this.excludedPaymentTypes, this.defaultPaymentMethodId, this.installments, this.defaultInstallments);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "PreferencePaymentMethodsRequest.PreferencePaymentMethodsRequestBuilder(excludedPaymentMethods=" + this.excludedPaymentMethods + ", excludedPaymentTypes=" + this.excludedPaymentTypes + ", defaultPaymentMethodId=" + this.defaultPaymentMethodId + ", installments=" + this.installments + ", defaultInstallments=" + this.defaultInstallments + ")";
    }
  }

  @java.lang.SuppressWarnings("all")
  public static PreferencePaymentMethodsRequest.PreferencePaymentMethodsRequestBuilder builder() {
    return new PreferencePaymentMethodsRequest.PreferencePaymentMethodsRequestBuilder();
  }

  /**
   * Payment methods not allowed in payment process (except account_money).
   */
  @java.lang.SuppressWarnings("all")
  public List<PreferencePaymentMethodRequest> getExcludedPaymentMethods() {
    return this.excludedPaymentMethods;
  }

  /**
   * Payment types not allowed in payment process.
   */
  @java.lang.SuppressWarnings("all")
  public List<PreferencePaymentTypeRequest> getExcludedPaymentTypes() {
    return this.excludedPaymentTypes;
  }

  /**
   * Payment method to be preferred on the payments methods list.
   */
  @java.lang.SuppressWarnings("all")
  public String getDefaultPaymentMethodId() {
    return this.defaultPaymentMethodId;
  }

  /**
   * Maximum number of credit card installments to be accepted.
   */
  @java.lang.SuppressWarnings("all")
  public Integer getInstallments() {
    return this.installments;
  }

  /**
   * Preferred number of credit card installments.
   */
  @java.lang.SuppressWarnings("all")
  public Integer getDefaultInstallments() {
    return this.defaultInstallments;
  }
}
