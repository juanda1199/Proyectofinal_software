// Generated by delombok at Fri Aug 26 19:04:59 CDT 2022
package com.mercadopago.client.preference;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Parameters to create/update a preference.
 */
public class PreferenceRequest {
  /**
   * Additional info.
   */
  private final String additionalInfo;
  /**
   * If specified, your buyers will be redirected back to your site immediately after completing the
   * purchase.
   */
  private final String autoReturn;
  /**
   * URLs to return to the sellers website.
   */
  private final PreferenceBackUrlsRequest backUrls;
  /**
   * When set to true, the payment can only be approved or rejected. Otherwise in_process status is
   * added.
   */
  private final Boolean binaryMode;
  /**
   * Expiration date of cash payment.
   */
  private final OffsetDateTime dateOfExpiration;
  /**
   * Differential pricing configuration for this preference.
   */
  private final PreferenceDifferentialPricingRequest differentialPricing;
  /**
   * Date since the preference will be active.
   */
  private final OffsetDateTime expirationDateFrom;
  /**
   * Date when the preference will be expired.
   */
  private final OffsetDateTime expirationDateTo;
  /**
   * True if a preference expires, false if not.
   */
  private final Boolean expires;
  /**
   * Reference you can synchronize with your payment system.
   */
  private final String externalReference;
  /**
   * List of items to be paid.
   */
  private final List<PreferenceItemRequest> items;
  /**
   * Origin of the payment. Default value: NONE.
   */
  private final String marketplace;
  /**
   * Marketplace's fee charged by application owner.
   */
  private final BigDecimal marketplaceFee;
  /**
   * Data that can be attached to the preference to record additional attributes of the merchant.
   */
  private final Map<String, Object> metadata;
  /**
   * URL where you'd like to receive a payment notification.
   */
  private final String notificationUrl;
  /**
   * Operation type.
   */
  private final String operationType;
  /**
   * Payer information.
   */
  private final PreferencePayerRequest payer;
  /**
   * Set up payment methods.
   */
  private final PreferencePaymentMethodsRequest paymentMethods;
  /**
   * Configures which processing modes to use.
   */
  private final List<String> processingModes;
  /**
   * Purpose of the Preference.
   */
  private final String purpose;
  /**
   * Shipments information.
   */
  private final PreferenceShipmentsRequest shipments;
  /**
   * How will look the payment in the card bill.
   */
  private final String statementDescriptor;
  /**
   * Taxes for preferences.
   */
  private final List<PreferenceTaxRequest> taxes;
  /**
   * Tracks to be executed during the users interaction in the Checkout flow.
   */
  private final List<PreferenceTrackRequest> tracks;

  @java.lang.SuppressWarnings("all")
  PreferenceRequest(final String additionalInfo, final String autoReturn, final PreferenceBackUrlsRequest backUrls, final Boolean binaryMode, final OffsetDateTime dateOfExpiration, final PreferenceDifferentialPricingRequest differentialPricing, final OffsetDateTime expirationDateFrom, final OffsetDateTime expirationDateTo, final Boolean expires, final String externalReference, final List<PreferenceItemRequest> items, final String marketplace, final BigDecimal marketplaceFee, final Map<String, Object> metadata, final String notificationUrl, final String operationType, final PreferencePayerRequest payer, final PreferencePaymentMethodsRequest paymentMethods, final List<String> processingModes, final String purpose, final PreferenceShipmentsRequest shipments, final String statementDescriptor, final List<PreferenceTaxRequest> taxes, final List<PreferenceTrackRequest> tracks) {
    this.additionalInfo = additionalInfo;
    this.autoReturn = autoReturn;
    this.backUrls = backUrls;
    this.binaryMode = binaryMode;
    this.dateOfExpiration = dateOfExpiration;
    this.differentialPricing = differentialPricing;
    this.expirationDateFrom = expirationDateFrom;
    this.expirationDateTo = expirationDateTo;
    this.expires = expires;
    this.externalReference = externalReference;
    this.items = items;
    this.marketplace = marketplace;
    this.marketplaceFee = marketplaceFee;
    this.metadata = metadata;
    this.notificationUrl = notificationUrl;
    this.operationType = operationType;
    this.payer = payer;
    this.paymentMethods = paymentMethods;
    this.processingModes = processingModes;
    this.purpose = purpose;
    this.shipments = shipments;
    this.statementDescriptor = statementDescriptor;
    this.taxes = taxes;
    this.tracks = tracks;
  }


  @java.lang.SuppressWarnings("all")
  public static class PreferenceRequestBuilder {
    @java.lang.SuppressWarnings("all")
    private String additionalInfo;
    @java.lang.SuppressWarnings("all")
    private String autoReturn;
    @java.lang.SuppressWarnings("all")
    private PreferenceBackUrlsRequest backUrls;
    @java.lang.SuppressWarnings("all")
    private Boolean binaryMode;
    @java.lang.SuppressWarnings("all")
    private OffsetDateTime dateOfExpiration;
    @java.lang.SuppressWarnings("all")
    private PreferenceDifferentialPricingRequest differentialPricing;
    @java.lang.SuppressWarnings("all")
    private OffsetDateTime expirationDateFrom;
    @java.lang.SuppressWarnings("all")
    private OffsetDateTime expirationDateTo;
    @java.lang.SuppressWarnings("all")
    private Boolean expires;
    @java.lang.SuppressWarnings("all")
    private String externalReference;
    @java.lang.SuppressWarnings("all")
    private List<PreferenceItemRequest> items;
    @java.lang.SuppressWarnings("all")
    private String marketplace;
    @java.lang.SuppressWarnings("all")
    private BigDecimal marketplaceFee;
    @java.lang.SuppressWarnings("all")
    private Map<String, Object> metadata;
    @java.lang.SuppressWarnings("all")
    private String notificationUrl;
    @java.lang.SuppressWarnings("all")
    private String operationType;
    @java.lang.SuppressWarnings("all")
    private PreferencePayerRequest payer;
    @java.lang.SuppressWarnings("all")
    private PreferencePaymentMethodsRequest paymentMethods;
    @java.lang.SuppressWarnings("all")
    private List<String> processingModes;
    @java.lang.SuppressWarnings("all")
    private String purpose;
    @java.lang.SuppressWarnings("all")
    private PreferenceShipmentsRequest shipments;
    @java.lang.SuppressWarnings("all")
    private String statementDescriptor;
    @java.lang.SuppressWarnings("all")
    private List<PreferenceTaxRequest> taxes;
    @java.lang.SuppressWarnings("all")
    private List<PreferenceTrackRequest> tracks;

    @java.lang.SuppressWarnings("all")
    PreferenceRequestBuilder() {
    }

    /**
     * Additional info.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder additionalInfo(final String additionalInfo) {
      this.additionalInfo = additionalInfo;
      return this;
    }

    /**
     * If specified, your buyers will be redirected back to your site immediately after completing the
     * purchase.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder autoReturn(final String autoReturn) {
      this.autoReturn = autoReturn;
      return this;
    }

    /**
     * URLs to return to the sellers website.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder backUrls(final PreferenceBackUrlsRequest backUrls) {
      this.backUrls = backUrls;
      return this;
    }

    /**
     * When set to true, the payment can only be approved or rejected. Otherwise in_process status is
     * added.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder binaryMode(final Boolean binaryMode) {
      this.binaryMode = binaryMode;
      return this;
    }

    /**
     * Expiration date of cash payment.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder dateOfExpiration(final OffsetDateTime dateOfExpiration) {
      this.dateOfExpiration = dateOfExpiration;
      return this;
    }

    /**
     * Differential pricing configuration for this preference.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder differentialPricing(final PreferenceDifferentialPricingRequest differentialPricing) {
      this.differentialPricing = differentialPricing;
      return this;
    }

    /**
     * Date since the preference will be active.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder expirationDateFrom(final OffsetDateTime expirationDateFrom) {
      this.expirationDateFrom = expirationDateFrom;
      return this;
    }

    /**
     * Date when the preference will be expired.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder expirationDateTo(final OffsetDateTime expirationDateTo) {
      this.expirationDateTo = expirationDateTo;
      return this;
    }

    /**
     * True if a preference expires, false if not.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder expires(final Boolean expires) {
      this.expires = expires;
      return this;
    }

    /**
     * Reference you can synchronize with your payment system.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder externalReference(final String externalReference) {
      this.externalReference = externalReference;
      return this;
    }

    /**
     * List of items to be paid.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder items(final List<PreferenceItemRequest> items) {
      this.items = items;
      return this;
    }

    /**
     * Origin of the payment. Default value: NONE.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder marketplace(final String marketplace) {
      this.marketplace = marketplace;
      return this;
    }

    /**
     * Marketplace's fee charged by application owner.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder marketplaceFee(final BigDecimal marketplaceFee) {
      this.marketplaceFee = marketplaceFee;
      return this;
    }

    /**
     * Data that can be attached to the preference to record additional attributes of the merchant.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder metadata(final Map<String, Object> metadata) {
      this.metadata = metadata;
      return this;
    }

    /**
     * URL where you'd like to receive a payment notification.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder notificationUrl(final String notificationUrl) {
      this.notificationUrl = notificationUrl;
      return this;
    }

    /**
     * Operation type.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder operationType(final String operationType) {
      this.operationType = operationType;
      return this;
    }

    /**
     * Payer information.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder payer(final PreferencePayerRequest payer) {
      this.payer = payer;
      return this;
    }

    /**
     * Set up payment methods.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder paymentMethods(final PreferencePaymentMethodsRequest paymentMethods) {
      this.paymentMethods = paymentMethods;
      return this;
    }

    /**
     * Configures which processing modes to use.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder processingModes(final List<String> processingModes) {
      this.processingModes = processingModes;
      return this;
    }

    /**
     * Purpose of the Preference.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder purpose(final String purpose) {
      this.purpose = purpose;
      return this;
    }

    /**
     * Shipments information.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder shipments(final PreferenceShipmentsRequest shipments) {
      this.shipments = shipments;
      return this;
    }

    /**
     * How will look the payment in the card bill.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder statementDescriptor(final String statementDescriptor) {
      this.statementDescriptor = statementDescriptor;
      return this;
    }

    /**
     * Taxes for preferences.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder taxes(final List<PreferenceTaxRequest> taxes) {
      this.taxes = taxes;
      return this;
    }

    /**
     * Tracks to be executed during the users interaction in the Checkout flow.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PreferenceRequest.PreferenceRequestBuilder tracks(final List<PreferenceTrackRequest> tracks) {
      this.tracks = tracks;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PreferenceRequest build() {
      return new PreferenceRequest(this.additionalInfo, this.autoReturn, this.backUrls, this.binaryMode, this.dateOfExpiration, this.differentialPricing, this.expirationDateFrom, this.expirationDateTo, this.expires, this.externalReference, this.items, this.marketplace, this.marketplaceFee, this.metadata, this.notificationUrl, this.operationType, this.payer, this.paymentMethods, this.processingModes, this.purpose, this.shipments, this.statementDescriptor, this.taxes, this.tracks);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "PreferenceRequest.PreferenceRequestBuilder(additionalInfo=" + this.additionalInfo + ", autoReturn=" + this.autoReturn + ", backUrls=" + this.backUrls + ", binaryMode=" + this.binaryMode + ", dateOfExpiration=" + this.dateOfExpiration + ", differentialPricing=" + this.differentialPricing + ", expirationDateFrom=" + this.expirationDateFrom + ", expirationDateTo=" + this.expirationDateTo + ", expires=" + this.expires + ", externalReference=" + this.externalReference + ", items=" + this.items + ", marketplace=" + this.marketplace + ", marketplaceFee=" + this.marketplaceFee + ", metadata=" + this.metadata + ", notificationUrl=" + this.notificationUrl + ", operationType=" + this.operationType + ", payer=" + this.payer + ", paymentMethods=" + this.paymentMethods + ", processingModes=" + this.processingModes + ", purpose=" + this.purpose + ", shipments=" + this.shipments + ", statementDescriptor=" + this.statementDescriptor + ", taxes=" + this.taxes + ", tracks=" + this.tracks + ")";
    }
  }

  @java.lang.SuppressWarnings("all")
  public static PreferenceRequest.PreferenceRequestBuilder builder() {
    return new PreferenceRequest.PreferenceRequestBuilder();
  }

  /**
   * Additional info.
   */
  @java.lang.SuppressWarnings("all")
  public String getAdditionalInfo() {
    return this.additionalInfo;
  }

  /**
   * If specified, your buyers will be redirected back to your site immediately after completing the
   * purchase.
   */
  @java.lang.SuppressWarnings("all")
  public String getAutoReturn() {
    return this.autoReturn;
  }

  /**
   * URLs to return to the sellers website.
   */
  @java.lang.SuppressWarnings("all")
  public PreferenceBackUrlsRequest getBackUrls() {
    return this.backUrls;
  }

  /**
   * When set to true, the payment can only be approved or rejected. Otherwise in_process status is
   * added.
   */
  @java.lang.SuppressWarnings("all")
  public Boolean getBinaryMode() {
    return this.binaryMode;
  }

  /**
   * Expiration date of cash payment.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getDateOfExpiration() {
    return this.dateOfExpiration;
  }

  /**
   * Differential pricing configuration for this preference.
   */
  @java.lang.SuppressWarnings("all")
  public PreferenceDifferentialPricingRequest getDifferentialPricing() {
    return this.differentialPricing;
  }

  /**
   * Date since the preference will be active.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getExpirationDateFrom() {
    return this.expirationDateFrom;
  }

  /**
   * Date when the preference will be expired.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getExpirationDateTo() {
    return this.expirationDateTo;
  }

  /**
   * True if a preference expires, false if not.
   */
  @java.lang.SuppressWarnings("all")
  public Boolean getExpires() {
    return this.expires;
  }

  /**
   * Reference you can synchronize with your payment system.
   */
  @java.lang.SuppressWarnings("all")
  public String getExternalReference() {
    return this.externalReference;
  }

  /**
   * List of items to be paid.
   */
  @java.lang.SuppressWarnings("all")
  public List<PreferenceItemRequest> getItems() {
    return this.items;
  }

  /**
   * Origin of the payment. Default value: NONE.
   */
  @java.lang.SuppressWarnings("all")
  public String getMarketplace() {
    return this.marketplace;
  }

  /**
   * Marketplace's fee charged by application owner.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getMarketplaceFee() {
    return this.marketplaceFee;
  }

  /**
   * Data that can be attached to the preference to record additional attributes of the merchant.
   */
  @java.lang.SuppressWarnings("all")
  public Map<String, Object> getMetadata() {
    return this.metadata;
  }

  /**
   * URL where you'd like to receive a payment notification.
   */
  @java.lang.SuppressWarnings("all")
  public String getNotificationUrl() {
    return this.notificationUrl;
  }

  /**
   * Operation type.
   */
  @java.lang.SuppressWarnings("all")
  public String getOperationType() {
    return this.operationType;
  }

  /**
   * Payer information.
   */
  @java.lang.SuppressWarnings("all")
  public PreferencePayerRequest getPayer() {
    return this.payer;
  }

  /**
   * Set up payment methods.
   */
  @java.lang.SuppressWarnings("all")
  public PreferencePaymentMethodsRequest getPaymentMethods() {
    return this.paymentMethods;
  }

  /**
   * Configures which processing modes to use.
   */
  @java.lang.SuppressWarnings("all")
  public List<String> getProcessingModes() {
    return this.processingModes;
  }

  /**
   * Purpose of the Preference.
   */
  @java.lang.SuppressWarnings("all")
  public String getPurpose() {
    return this.purpose;
  }

  /**
   * Shipments information.
   */
  @java.lang.SuppressWarnings("all")
  public PreferenceShipmentsRequest getShipments() {
    return this.shipments;
  }

  /**
   * How will look the payment in the card bill.
   */
  @java.lang.SuppressWarnings("all")
  public String getStatementDescriptor() {
    return this.statementDescriptor;
  }

  /**
   * Taxes for preferences.
   */
  @java.lang.SuppressWarnings("all")
  public List<PreferenceTaxRequest> getTaxes() {
    return this.taxes;
  }

  /**
   * Tracks to be executed during the users interaction in the Checkout flow.
   */
  @java.lang.SuppressWarnings("all")
  public List<PreferenceTrackRequest> getTracks() {
    return this.tracks;
  }
}
