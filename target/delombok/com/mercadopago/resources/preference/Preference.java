// Generated by delombok at Fri Aug 26 19:04:59 CDT 2022
package com.mercadopago.resources.preference;

import com.mercadopago.net.MPResource;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Preference resource.
 */
public class Preference extends MPResource {
  /**
   * Preference ID.
   */
  private String id;
  /**
   * List of items to be paid.
   */
  private List<PreferenceItem> items;
  /**
   * Payer information.
   */
  private PreferencePayer payer;
  /**
   * Client ID.
   */
  private String clientId;
  /**
   * Set up payment methods.
   */
  private PreferencePaymentMethods paymentMethods;
  /**
   * URLs to return to the sellers website.
   */
  private PreferenceBackUrls backUrls;
  /**
   * Shipments information.
   */
  private PreferenceShipments shipments;
  /**
   * URL where you'd like to receive a payment notification.
   */
  private String notificationUrl;
  /**
   * How the payment will be specified in the card bill.
   */
  private String statementDescriptor;
  /**
   * Reference you can synchronize with your payment system.
   */
  private String externalReference;
  /**
   * True if a preference expires, false if not.
   */
  private Boolean expires;
  /**
   * Expiration date of cash payment.
   */
  private OffsetDateTime dateOfExpiration;
  /**
   * Date when the preference will be active.
   */
  private OffsetDateTime expirationDateFrom;
  /**
   * Date when the preference will be expired.
   */
  private OffsetDateTime expirationDateTo;
  /**
   * Collector ID.
   */
  private Long collectorId;
  /**
   * Origin of the payment. Default value: NONE.
   */
  private String marketplace;
  /**
   * Marketplace's fee charged by application owner.
   */
  private BigDecimal marketplaceFee;
  /**
   * Additional info.
   */
  private String additionalInfo;
  /**
   * If specified, your buyers will be redirected back to your site immediately after completing the
   * purchase.
   */
  private String autoReturn;
  /**
   * Operation type.
   */
  private String operationType;
  /**
   * Differential pricing configuration for this preference.
   */
  private PreferenceDifferentialPricing differentialPricing;
  /**
   * Configures which processing modes to use.
   */
  private List<String> processingModes;
  /**
   * When set to true, the payment can only be approved or rejected. Otherwise in_process status is
   * added.
   */
  private Boolean binaryMode;
  /**
   * Taxes for preferences.
   */
  private List<PreferenceTax> taxes;
  /**
   * Tracks to be executed during the users interaction in the Checkout flow.
   */
  private List<PreferenceTrack> tracks;
  /**
   * Data that can be attached to the preference to record additional attributes of the merchant.
   */
  private Map<String, Object> metadata;
  /**
   * Checkout URL from preference.
   */
  private String initPoint;
  /**
   * Sandbox checkout URL from preference.
   */
  private String sandboxInitPoint;
  /**
   * Date of creation.
   */
  private OffsetDateTime dateCreated;

  /**
   * Preference ID.
   */
  @java.lang.SuppressWarnings("all")
  public String getId() {
    return this.id;
  }

  /**
   * List of items to be paid.
   */
  @java.lang.SuppressWarnings("all")
  public List<PreferenceItem> getItems() {
    return this.items;
  }

  /**
   * Payer information.
   */
  @java.lang.SuppressWarnings("all")
  public PreferencePayer getPayer() {
    return this.payer;
  }

  /**
   * Client ID.
   */
  @java.lang.SuppressWarnings("all")
  public String getClientId() {
    return this.clientId;
  }

  /**
   * Set up payment methods.
   */
  @java.lang.SuppressWarnings("all")
  public PreferencePaymentMethods getPaymentMethods() {
    return this.paymentMethods;
  }

  /**
   * URLs to return to the sellers website.
   */
  @java.lang.SuppressWarnings("all")
  public PreferenceBackUrls getBackUrls() {
    return this.backUrls;
  }

  /**
   * Shipments information.
   */
  @java.lang.SuppressWarnings("all")
  public PreferenceShipments getShipments() {
    return this.shipments;
  }

  /**
   * URL where you'd like to receive a payment notification.
   */
  @java.lang.SuppressWarnings("all")
  public String getNotificationUrl() {
    return this.notificationUrl;
  }

  /**
   * How the payment will be specified in the card bill.
   */
  @java.lang.SuppressWarnings("all")
  public String getStatementDescriptor() {
    return this.statementDescriptor;
  }

  /**
   * Reference you can synchronize with your payment system.
   */
  @java.lang.SuppressWarnings("all")
  public String getExternalReference() {
    return this.externalReference;
  }

  /**
   * True if a preference expires, false if not.
   */
  @java.lang.SuppressWarnings("all")
  public Boolean getExpires() {
    return this.expires;
  }

  /**
   * Expiration date of cash payment.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getDateOfExpiration() {
    return this.dateOfExpiration;
  }

  /**
   * Date when the preference will be active.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getExpirationDateFrom() {
    return this.expirationDateFrom;
  }

  /**
   * Date when the preference will be expired.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getExpirationDateTo() {
    return this.expirationDateTo;
  }

  /**
   * Collector ID.
   */
  @java.lang.SuppressWarnings("all")
  public Long getCollectorId() {
    return this.collectorId;
  }

  /**
   * Origin of the payment. Default value: NONE.
   */
  @java.lang.SuppressWarnings("all")
  public String getMarketplace() {
    return this.marketplace;
  }

  /**
   * Marketplace's fee charged by application owner.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getMarketplaceFee() {
    return this.marketplaceFee;
  }

  /**
   * Additional info.
   */
  @java.lang.SuppressWarnings("all")
  public String getAdditionalInfo() {
    return this.additionalInfo;
  }

  /**
   * If specified, your buyers will be redirected back to your site immediately after completing the
   * purchase.
   */
  @java.lang.SuppressWarnings("all")
  public String getAutoReturn() {
    return this.autoReturn;
  }

  /**
   * Operation type.
   */
  @java.lang.SuppressWarnings("all")
  public String getOperationType() {
    return this.operationType;
  }

  /**
   * Differential pricing configuration for this preference.
   */
  @java.lang.SuppressWarnings("all")
  public PreferenceDifferentialPricing getDifferentialPricing() {
    return this.differentialPricing;
  }

  /**
   * Configures which processing modes to use.
   */
  @java.lang.SuppressWarnings("all")
  public List<String> getProcessingModes() {
    return this.processingModes;
  }

  /**
   * When set to true, the payment can only be approved or rejected. Otherwise in_process status is
   * added.
   */
  @java.lang.SuppressWarnings("all")
  public Boolean getBinaryMode() {
    return this.binaryMode;
  }

  /**
   * Taxes for preferences.
   */
  @java.lang.SuppressWarnings("all")
  public List<PreferenceTax> getTaxes() {
    return this.taxes;
  }

  /**
   * Tracks to be executed during the users interaction in the Checkout flow.
   */
  @java.lang.SuppressWarnings("all")
  public List<PreferenceTrack> getTracks() {
    return this.tracks;
  }

  /**
   * Data that can be attached to the preference to record additional attributes of the merchant.
   */
  @java.lang.SuppressWarnings("all")
  public Map<String, Object> getMetadata() {
    return this.metadata;
  }

  /**
   * Checkout URL from preference.
   */
  @java.lang.SuppressWarnings("all")
  public String getInitPoint() {
    return this.initPoint;
  }

  /**
   * Sandbox checkout URL from preference.
   */
  @java.lang.SuppressWarnings("all")
  public String getSandboxInitPoint() {
    return this.sandboxInitPoint;
  }

  /**
   * Date of creation.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getDateCreated() {
    return this.dateCreated;
  }
}
