// Generated by delombok at Fri Aug 26 19:04:59 CDT 2022
package com.mercadopago.resources.payment;

import java.math.BigDecimal;

/**
 * PaymentTransactionDetails class.
 */
public class PaymentTransactionDetails {
  /**
   * External financial institution identifier.
   */
  private String financialInstitution;
  /**
   * Amount received by the seller.
   */
  private BigDecimal netReceivedAmount;
  /**
   * Total amount paid by the buyer (includes fees).
   */
  private BigDecimal totalPaidAmount;
  /**
   * Total installments amount.
   */
  private BigDecimal installmentAmount;
  /**
   * Amount overpaid (only for tickets).
   */
  private BigDecimal overpaidAmount;
  /**
   * Identifies the resource in the payment processor.
   */
  private String externalResourceUrl;
  /**
   * For credit card payments is the USN. For offline payment methods, is the reference to give to
   * the cashier or to input into the ATM.
   */
  private String paymentMethodReferenceId;
  /**
   * Acquirer Reference.
   */
  private String acquirerReference;

  /**
   * External financial institution identifier.
   */
  @java.lang.SuppressWarnings("all")
  public String getFinancialInstitution() {
    return this.financialInstitution;
  }

  /**
   * Amount received by the seller.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getNetReceivedAmount() {
    return this.netReceivedAmount;
  }

  /**
   * Total amount paid by the buyer (includes fees).
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getTotalPaidAmount() {
    return this.totalPaidAmount;
  }

  /**
   * Total installments amount.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getInstallmentAmount() {
    return this.installmentAmount;
  }

  /**
   * Amount overpaid (only for tickets).
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getOverpaidAmount() {
    return this.overpaidAmount;
  }

  /**
   * Identifies the resource in the payment processor.
   */
  @java.lang.SuppressWarnings("all")
  public String getExternalResourceUrl() {
    return this.externalResourceUrl;
  }

  /**
   * For credit card payments is the USN. For offline payment methods, is the reference to give to
   * the cashier or to input into the ATM.
   */
  @java.lang.SuppressWarnings("all")
  public String getPaymentMethodReferenceId() {
    return this.paymentMethodReferenceId;
  }

  /**
   * Acquirer Reference.
   */
  @java.lang.SuppressWarnings("all")
  public String getAcquirerReference() {
    return this.acquirerReference;
  }
}
