// Generated by delombok at Fri Aug 26 19:04:59 CDT 2022
package com.mercadopago.resources.payment;

import com.mercadopago.net.MPResource;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Payment class.
 */
public class Payment extends MPResource {
  /**
   * Payment ID.
   */
  private Long id;
  /**
   * Creation date.
   */
  private OffsetDateTime dateCreated;
  /**
   * Approval date.
   */
  private OffsetDateTime dateApproved;
  /**
   * Last modified date.
   */
  private OffsetDateTime dateLastUpdated;
  /**
   * Date of expiration.
   */
  private OffsetDateTime dateOfExpiration;
  /**
   * Release date.
   */
  private OffsetDateTime moneyReleaseDate;
  /**
   * Release schema.
   */
  private String moneyReleaseSchema;
  /**
   * Operation type.
   */
  private String operationType;
  /**
   * Payment method issuer.
   */
  private String issuerId;
  /**
   * Payment method chosen to do the payment.
   */
  private String paymentMethodId;
  /**
   * Payment type.
   */
  private String paymentTypeId;
  /**
   * Status.
   */
  private String status;
  /**
   * Status detail.
   */
  private String statusDetail;
  /**
   * Currency information.
   */
  private String currencyId;
  /**
   * Payment reason or item title.
   */
  private String description;
  /**
   * Live mode.
   */
  private boolean liveMode;
  /**
   * Sponsor Identification.
   */
  private Long sponsorId;
  /**
   * Authorization code.
   */
  private String authorizationCode;
  /**
   * Integrator identification.
   */
  private String integratorId;
  /**
   * Platform identification.
   */
  private String platformId;
  /**
   * Corporation identification.
   */
  private String corporationId;
  /**
   * Collector ID.
   */
  private Long collectorId;
  /**
   * Payer information.
   */
  private PaymentPayer payer;
  /**
   * Data that can be attached to the payment to record additional attributes of the merchant.
   */
  private Map<String, Object> metadata;
  /**
   * Data that could improve fraud analysis and conversion rates. Try to send as much information as
   * possible.
   */
  private PaymentAdditionalInfo additionalInfo;
  /**
   * Order identifier.
   */
  private PaymentOrder order;
  /**
   * ID given by the merchant in their system.
   */
  private String externalReference;
  /**
   * Amount paid.
   */
  private BigDecimal transactionAmount;
  /**
   * Total refunded amount.
   */
  private BigDecimal transactionAmountRefunded;
  /**
   * Amount of the coupon.
   */
  private BigDecimal couponAmount;
  /**
   * Id of the scheme for the absorption of financing fee.
   */
  private String differentialPricingId;
  /**
   * Selected quantity of installments.
   */
  private int installments;
  /**
   * Transaction details.
   */
  private PaymentTransactionDetails transactionDetails;
  /**
   * Fee details.
   */
  private List<PaymentFeeDetail> feeDetails;
  /**
   * If the payment is captured (true) or just reserved (false).
   */
  private boolean captured;
  /**
   * When set to true, the payment can only be approved or rejected. Otherwise in_process status is
   * added.
   */
  private boolean binaryMode;
  /**
   * Gives more detailed information on the current state or rejection cause.
   */
  private String callForAuthorizeId;
  /**
   * How will look the payment in the card bill.
   */
  private String statementDescriptor;
  /**
   * Card used to pay.
   */
  private PaymentCard card;
  /**
   * URL where mercadopago will send notifications associated to changes in this payment.
   */
  private String notificationUrl;
  /**
   * URL where mercadopago does the final redirect (only for bank transfers).
   */
  private String callbackUrl;
  /**
   * Processing mode to define if an specific merchant id should be used.
   */
  private String processingMode;
  /**
   * Merchant Id for complex payment cases.
   */
  private String merchantAccountId;
  /**
   * Discount campaign ID.
   */
  private String merchantNumber;
  /**
   * Discount campaign coupon code.
   */
  private String couponCode;
  /**
   * Payment net amount.
   */
  private BigDecimal netAmount;
  /**
   * Payment method option id.
   */
  private String paymentMethodOptionId;
  /**
   * Taxes for payments.
   */
  private List<PaymentTax> taxes;
  /**
   * Taxes amount.
   */
  private BigDecimal taxesAmount;
  /**
   * Counter currency.
   */
  private String counterCurrency;
  /**
   * Shipping amount.
   */
  private BigDecimal shippingAmount;
  /**
   * Pos id.
   */
  private String posId;
  /**
   * Store id.
   */
  private String storeId;
  /**
   * Deduction Schema.
   */
  private String deductionSchema;
  /**
   * Refunds.
   */
  private List<PaymentRefund> refunds;
  /**
   * Point of interaction.
   */
  private PaymentPointOfInteraction pointOfInteraction;

  /**
   * Payment ID.
   */
  @java.lang.SuppressWarnings("all")
  public Long getId() {
    return this.id;
  }

  /**
   * Creation date.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getDateCreated() {
    return this.dateCreated;
  }

  /**
   * Approval date.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getDateApproved() {
    return this.dateApproved;
  }

  /**
   * Last modified date.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getDateLastUpdated() {
    return this.dateLastUpdated;
  }

  /**
   * Date of expiration.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getDateOfExpiration() {
    return this.dateOfExpiration;
  }

  /**
   * Release date.
   */
  @java.lang.SuppressWarnings("all")
  public OffsetDateTime getMoneyReleaseDate() {
    return this.moneyReleaseDate;
  }

  /**
   * Release schema.
   */
  @java.lang.SuppressWarnings("all")
  public String getMoneyReleaseSchema() {
    return this.moneyReleaseSchema;
  }

  /**
   * Operation type.
   */
  @java.lang.SuppressWarnings("all")
  public String getOperationType() {
    return this.operationType;
  }

  /**
   * Payment method issuer.
   */
  @java.lang.SuppressWarnings("all")
  public String getIssuerId() {
    return this.issuerId;
  }

  /**
   * Payment method chosen to do the payment.
   */
  @java.lang.SuppressWarnings("all")
  public String getPaymentMethodId() {
    return this.paymentMethodId;
  }

  /**
   * Payment type.
   */
  @java.lang.SuppressWarnings("all")
  public String getPaymentTypeId() {
    return this.paymentTypeId;
  }

  /**
   * Status.
   */
  @java.lang.SuppressWarnings("all")
  public String getStatus() {
    return this.status;
  }

  /**
   * Status detail.
   */
  @java.lang.SuppressWarnings("all")
  public String getStatusDetail() {
    return this.statusDetail;
  }

  /**
   * Currency information.
   */
  @java.lang.SuppressWarnings("all")
  public String getCurrencyId() {
    return this.currencyId;
  }

  /**
   * Payment reason or item title.
   */
  @java.lang.SuppressWarnings("all")
  public String getDescription() {
    return this.description;
  }

  /**
   * Live mode.
   */
  @java.lang.SuppressWarnings("all")
  public boolean isLiveMode() {
    return this.liveMode;
  }

  /**
   * Sponsor Identification.
   */
  @java.lang.SuppressWarnings("all")
  public Long getSponsorId() {
    return this.sponsorId;
  }

  /**
   * Authorization code.
   */
  @java.lang.SuppressWarnings("all")
  public String getAuthorizationCode() {
    return this.authorizationCode;
  }

  /**
   * Integrator identification.
   */
  @java.lang.SuppressWarnings("all")
  public String getIntegratorId() {
    return this.integratorId;
  }

  /**
   * Platform identification.
   */
  @java.lang.SuppressWarnings("all")
  public String getPlatformId() {
    return this.platformId;
  }

  /**
   * Corporation identification.
   */
  @java.lang.SuppressWarnings("all")
  public String getCorporationId() {
    return this.corporationId;
  }

  /**
   * Collector ID.
   */
  @java.lang.SuppressWarnings("all")
  public Long getCollectorId() {
    return this.collectorId;
  }

  /**
   * Payer information.
   */
  @java.lang.SuppressWarnings("all")
  public PaymentPayer getPayer() {
    return this.payer;
  }

  /**
   * Data that can be attached to the payment to record additional attributes of the merchant.
   */
  @java.lang.SuppressWarnings("all")
  public Map<String, Object> getMetadata() {
    return this.metadata;
  }

  /**
   * Data that could improve fraud analysis and conversion rates. Try to send as much information as
   * possible.
   */
  @java.lang.SuppressWarnings("all")
  public PaymentAdditionalInfo getAdditionalInfo() {
    return this.additionalInfo;
  }

  /**
   * Order identifier.
   */
  @java.lang.SuppressWarnings("all")
  public PaymentOrder getOrder() {
    return this.order;
  }

  /**
   * ID given by the merchant in their system.
   */
  @java.lang.SuppressWarnings("all")
  public String getExternalReference() {
    return this.externalReference;
  }

  /**
   * Amount paid.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getTransactionAmount() {
    return this.transactionAmount;
  }

  /**
   * Total refunded amount.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getTransactionAmountRefunded() {
    return this.transactionAmountRefunded;
  }

  /**
   * Amount of the coupon.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getCouponAmount() {
    return this.couponAmount;
  }

  /**
   * Id of the scheme for the absorption of financing fee.
   */
  @java.lang.SuppressWarnings("all")
  public String getDifferentialPricingId() {
    return this.differentialPricingId;
  }

  /**
   * Selected quantity of installments.
   */
  @java.lang.SuppressWarnings("all")
  public int getInstallments() {
    return this.installments;
  }

  /**
   * Transaction details.
   */
  @java.lang.SuppressWarnings("all")
  public PaymentTransactionDetails getTransactionDetails() {
    return this.transactionDetails;
  }

  /**
   * Fee details.
   */
  @java.lang.SuppressWarnings("all")
  public List<PaymentFeeDetail> getFeeDetails() {
    return this.feeDetails;
  }

  /**
   * If the payment is captured (true) or just reserved (false).
   */
  @java.lang.SuppressWarnings("all")
  public boolean isCaptured() {
    return this.captured;
  }

  /**
   * When set to true, the payment can only be approved or rejected. Otherwise in_process status is
   * added.
   */
  @java.lang.SuppressWarnings("all")
  public boolean isBinaryMode() {
    return this.binaryMode;
  }

  /**
   * Gives more detailed information on the current state or rejection cause.
   */
  @java.lang.SuppressWarnings("all")
  public String getCallForAuthorizeId() {
    return this.callForAuthorizeId;
  }

  /**
   * How will look the payment in the card bill.
   */
  @java.lang.SuppressWarnings("all")
  public String getStatementDescriptor() {
    return this.statementDescriptor;
  }

  /**
   * Card used to pay.
   */
  @java.lang.SuppressWarnings("all")
  public PaymentCard getCard() {
    return this.card;
  }

  /**
   * URL where mercadopago will send notifications associated to changes in this payment.
   */
  @java.lang.SuppressWarnings("all")
  public String getNotificationUrl() {
    return this.notificationUrl;
  }

  /**
   * URL where mercadopago does the final redirect (only for bank transfers).
   */
  @java.lang.SuppressWarnings("all")
  public String getCallbackUrl() {
    return this.callbackUrl;
  }

  /**
   * Processing mode to define if an specific merchant id should be used.
   */
  @java.lang.SuppressWarnings("all")
  public String getProcessingMode() {
    return this.processingMode;
  }

  /**
   * Merchant Id for complex payment cases.
   */
  @java.lang.SuppressWarnings("all")
  public String getMerchantAccountId() {
    return this.merchantAccountId;
  }

  /**
   * Discount campaign ID.
   */
  @java.lang.SuppressWarnings("all")
  public String getMerchantNumber() {
    return this.merchantNumber;
  }

  /**
   * Discount campaign coupon code.
   */
  @java.lang.SuppressWarnings("all")
  public String getCouponCode() {
    return this.couponCode;
  }

  /**
   * Payment net amount.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getNetAmount() {
    return this.netAmount;
  }

  /**
   * Payment method option id.
   */
  @java.lang.SuppressWarnings("all")
  public String getPaymentMethodOptionId() {
    return this.paymentMethodOptionId;
  }

  /**
   * Taxes for payments.
   */
  @java.lang.SuppressWarnings("all")
  public List<PaymentTax> getTaxes() {
    return this.taxes;
  }

  /**
   * Taxes amount.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getTaxesAmount() {
    return this.taxesAmount;
  }

  /**
   * Counter currency.
   */
  @java.lang.SuppressWarnings("all")
  public String getCounterCurrency() {
    return this.counterCurrency;
  }

  /**
   * Shipping amount.
   */
  @java.lang.SuppressWarnings("all")
  public BigDecimal getShippingAmount() {
    return this.shippingAmount;
  }

  /**
   * Pos id.
   */
  @java.lang.SuppressWarnings("all")
  public String getPosId() {
    return this.posId;
  }

  /**
   * Store id.
   */
  @java.lang.SuppressWarnings("all")
  public String getStoreId() {
    return this.storeId;
  }

  /**
   * Deduction Schema.
   */
  @java.lang.SuppressWarnings("all")
  public String getDeductionSchema() {
    return this.deductionSchema;
  }

  /**
   * Refunds.
   */
  @java.lang.SuppressWarnings("all")
  public List<PaymentRefund> getRefunds() {
    return this.refunds;
  }

  /**
   * Point of interaction.
   */
  @java.lang.SuppressWarnings("all")
  public PaymentPointOfInteraction getPointOfInteraction() {
    return this.pointOfInteraction;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof Payment)) return false;
    final Payment other = (Payment) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    if (!super.equals(o)) return false;
    if (this.isLiveMode() != other.isLiveMode()) return false;
    if (this.getInstallments() != other.getInstallments()) return false;
    if (this.isCaptured() != other.isCaptured()) return false;
    if (this.isBinaryMode() != other.isBinaryMode()) return false;
    final java.lang.Object this$id = this.getId();
    final java.lang.Object other$id = other.getId();
    if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
    final java.lang.Object this$sponsorId = this.getSponsorId();
    final java.lang.Object other$sponsorId = other.getSponsorId();
    if (this$sponsorId == null ? other$sponsorId != null : !this$sponsorId.equals(other$sponsorId)) return false;
    final java.lang.Object this$collectorId = this.getCollectorId();
    final java.lang.Object other$collectorId = other.getCollectorId();
    if (this$collectorId == null ? other$collectorId != null : !this$collectorId.equals(other$collectorId)) return false;
    final java.lang.Object this$dateCreated = this.getDateCreated();
    final java.lang.Object other$dateCreated = other.getDateCreated();
    if (this$dateCreated == null ? other$dateCreated != null : !this$dateCreated.equals(other$dateCreated)) return false;
    final java.lang.Object this$dateApproved = this.getDateApproved();
    final java.lang.Object other$dateApproved = other.getDateApproved();
    if (this$dateApproved == null ? other$dateApproved != null : !this$dateApproved.equals(other$dateApproved)) return false;
    final java.lang.Object this$dateLastUpdated = this.getDateLastUpdated();
    final java.lang.Object other$dateLastUpdated = other.getDateLastUpdated();
    if (this$dateLastUpdated == null ? other$dateLastUpdated != null : !this$dateLastUpdated.equals(other$dateLastUpdated)) return false;
    final java.lang.Object this$dateOfExpiration = this.getDateOfExpiration();
    final java.lang.Object other$dateOfExpiration = other.getDateOfExpiration();
    if (this$dateOfExpiration == null ? other$dateOfExpiration != null : !this$dateOfExpiration.equals(other$dateOfExpiration)) return false;
    final java.lang.Object this$moneyReleaseDate = this.getMoneyReleaseDate();
    final java.lang.Object other$moneyReleaseDate = other.getMoneyReleaseDate();
    if (this$moneyReleaseDate == null ? other$moneyReleaseDate != null : !this$moneyReleaseDate.equals(other$moneyReleaseDate)) return false;
    final java.lang.Object this$moneyReleaseSchema = this.getMoneyReleaseSchema();
    final java.lang.Object other$moneyReleaseSchema = other.getMoneyReleaseSchema();
    if (this$moneyReleaseSchema == null ? other$moneyReleaseSchema != null : !this$moneyReleaseSchema.equals(other$moneyReleaseSchema)) return false;
    final java.lang.Object this$operationType = this.getOperationType();
    final java.lang.Object other$operationType = other.getOperationType();
    if (this$operationType == null ? other$operationType != null : !this$operationType.equals(other$operationType)) return false;
    final java.lang.Object this$issuerId = this.getIssuerId();
    final java.lang.Object other$issuerId = other.getIssuerId();
    if (this$issuerId == null ? other$issuerId != null : !this$issuerId.equals(other$issuerId)) return false;
    final java.lang.Object this$paymentMethodId = this.getPaymentMethodId();
    final java.lang.Object other$paymentMethodId = other.getPaymentMethodId();
    if (this$paymentMethodId == null ? other$paymentMethodId != null : !this$paymentMethodId.equals(other$paymentMethodId)) return false;
    final java.lang.Object this$paymentTypeId = this.getPaymentTypeId();
    final java.lang.Object other$paymentTypeId = other.getPaymentTypeId();
    if (this$paymentTypeId == null ? other$paymentTypeId != null : !this$paymentTypeId.equals(other$paymentTypeId)) return false;
    final java.lang.Object this$status = this.getStatus();
    final java.lang.Object other$status = other.getStatus();
    if (this$status == null ? other$status != null : !this$status.equals(other$status)) return false;
    final java.lang.Object this$statusDetail = this.getStatusDetail();
    final java.lang.Object other$statusDetail = other.getStatusDetail();
    if (this$statusDetail == null ? other$statusDetail != null : !this$statusDetail.equals(other$statusDetail)) return false;
    final java.lang.Object this$currencyId = this.getCurrencyId();
    final java.lang.Object other$currencyId = other.getCurrencyId();
    if (this$currencyId == null ? other$currencyId != null : !this$currencyId.equals(other$currencyId)) return false;
    final java.lang.Object this$description = this.getDescription();
    final java.lang.Object other$description = other.getDescription();
    if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;
    final java.lang.Object this$authorizationCode = this.getAuthorizationCode();
    final java.lang.Object other$authorizationCode = other.getAuthorizationCode();
    if (this$authorizationCode == null ? other$authorizationCode != null : !this$authorizationCode.equals(other$authorizationCode)) return false;
    final java.lang.Object this$integratorId = this.getIntegratorId();
    final java.lang.Object other$integratorId = other.getIntegratorId();
    if (this$integratorId == null ? other$integratorId != null : !this$integratorId.equals(other$integratorId)) return false;
    final java.lang.Object this$platformId = this.getPlatformId();
    final java.lang.Object other$platformId = other.getPlatformId();
    if (this$platformId == null ? other$platformId != null : !this$platformId.equals(other$platformId)) return false;
    final java.lang.Object this$corporationId = this.getCorporationId();
    final java.lang.Object other$corporationId = other.getCorporationId();
    if (this$corporationId == null ? other$corporationId != null : !this$corporationId.equals(other$corporationId)) return false;
    final java.lang.Object this$payer = this.getPayer();
    final java.lang.Object other$payer = other.getPayer();
    if (this$payer == null ? other$payer != null : !this$payer.equals(other$payer)) return false;
    final java.lang.Object this$metadata = this.getMetadata();
    final java.lang.Object other$metadata = other.getMetadata();
    if (this$metadata == null ? other$metadata != null : !this$metadata.equals(other$metadata)) return false;
    final java.lang.Object this$additionalInfo = this.getAdditionalInfo();
    final java.lang.Object other$additionalInfo = other.getAdditionalInfo();
    if (this$additionalInfo == null ? other$additionalInfo != null : !this$additionalInfo.equals(other$additionalInfo)) return false;
    final java.lang.Object this$order = this.getOrder();
    final java.lang.Object other$order = other.getOrder();
    if (this$order == null ? other$order != null : !this$order.equals(other$order)) return false;
    final java.lang.Object this$externalReference = this.getExternalReference();
    final java.lang.Object other$externalReference = other.getExternalReference();
    if (this$externalReference == null ? other$externalReference != null : !this$externalReference.equals(other$externalReference)) return false;
    final java.lang.Object this$transactionAmount = this.getTransactionAmount();
    final java.lang.Object other$transactionAmount = other.getTransactionAmount();
    if (this$transactionAmount == null ? other$transactionAmount != null : !this$transactionAmount.equals(other$transactionAmount)) return false;
    final java.lang.Object this$transactionAmountRefunded = this.getTransactionAmountRefunded();
    final java.lang.Object other$transactionAmountRefunded = other.getTransactionAmountRefunded();
    if (this$transactionAmountRefunded == null ? other$transactionAmountRefunded != null : !this$transactionAmountRefunded.equals(other$transactionAmountRefunded)) return false;
    final java.lang.Object this$couponAmount = this.getCouponAmount();
    final java.lang.Object other$couponAmount = other.getCouponAmount();
    if (this$couponAmount == null ? other$couponAmount != null : !this$couponAmount.equals(other$couponAmount)) return false;
    final java.lang.Object this$differentialPricingId = this.getDifferentialPricingId();
    final java.lang.Object other$differentialPricingId = other.getDifferentialPricingId();
    if (this$differentialPricingId == null ? other$differentialPricingId != null : !this$differentialPricingId.equals(other$differentialPricingId)) return false;
    final java.lang.Object this$transactionDetails = this.getTransactionDetails();
    final java.lang.Object other$transactionDetails = other.getTransactionDetails();
    if (this$transactionDetails == null ? other$transactionDetails != null : !this$transactionDetails.equals(other$transactionDetails)) return false;
    final java.lang.Object this$feeDetails = this.getFeeDetails();
    final java.lang.Object other$feeDetails = other.getFeeDetails();
    if (this$feeDetails == null ? other$feeDetails != null : !this$feeDetails.equals(other$feeDetails)) return false;
    final java.lang.Object this$callForAuthorizeId = this.getCallForAuthorizeId();
    final java.lang.Object other$callForAuthorizeId = other.getCallForAuthorizeId();
    if (this$callForAuthorizeId == null ? other$callForAuthorizeId != null : !this$callForAuthorizeId.equals(other$callForAuthorizeId)) return false;
    final java.lang.Object this$statementDescriptor = this.getStatementDescriptor();
    final java.lang.Object other$statementDescriptor = other.getStatementDescriptor();
    if (this$statementDescriptor == null ? other$statementDescriptor != null : !this$statementDescriptor.equals(other$statementDescriptor)) return false;
    final java.lang.Object this$card = this.getCard();
    final java.lang.Object other$card = other.getCard();
    if (this$card == null ? other$card != null : !this$card.equals(other$card)) return false;
    final java.lang.Object this$notificationUrl = this.getNotificationUrl();
    final java.lang.Object other$notificationUrl = other.getNotificationUrl();
    if (this$notificationUrl == null ? other$notificationUrl != null : !this$notificationUrl.equals(other$notificationUrl)) return false;
    final java.lang.Object this$callbackUrl = this.getCallbackUrl();
    final java.lang.Object other$callbackUrl = other.getCallbackUrl();
    if (this$callbackUrl == null ? other$callbackUrl != null : !this$callbackUrl.equals(other$callbackUrl)) return false;
    final java.lang.Object this$processingMode = this.getProcessingMode();
    final java.lang.Object other$processingMode = other.getProcessingMode();
    if (this$processingMode == null ? other$processingMode != null : !this$processingMode.equals(other$processingMode)) return false;
    final java.lang.Object this$merchantAccountId = this.getMerchantAccountId();
    final java.lang.Object other$merchantAccountId = other.getMerchantAccountId();
    if (this$merchantAccountId == null ? other$merchantAccountId != null : !this$merchantAccountId.equals(other$merchantAccountId)) return false;
    final java.lang.Object this$merchantNumber = this.getMerchantNumber();
    final java.lang.Object other$merchantNumber = other.getMerchantNumber();
    if (this$merchantNumber == null ? other$merchantNumber != null : !this$merchantNumber.equals(other$merchantNumber)) return false;
    final java.lang.Object this$couponCode = this.getCouponCode();
    final java.lang.Object other$couponCode = other.getCouponCode();
    if (this$couponCode == null ? other$couponCode != null : !this$couponCode.equals(other$couponCode)) return false;
    final java.lang.Object this$netAmount = this.getNetAmount();
    final java.lang.Object other$netAmount = other.getNetAmount();
    if (this$netAmount == null ? other$netAmount != null : !this$netAmount.equals(other$netAmount)) return false;
    final java.lang.Object this$paymentMethodOptionId = this.getPaymentMethodOptionId();
    final java.lang.Object other$paymentMethodOptionId = other.getPaymentMethodOptionId();
    if (this$paymentMethodOptionId == null ? other$paymentMethodOptionId != null : !this$paymentMethodOptionId.equals(other$paymentMethodOptionId)) return false;
    final java.lang.Object this$taxes = this.getTaxes();
    final java.lang.Object other$taxes = other.getTaxes();
    if (this$taxes == null ? other$taxes != null : !this$taxes.equals(other$taxes)) return false;
    final java.lang.Object this$taxesAmount = this.getTaxesAmount();
    final java.lang.Object other$taxesAmount = other.getTaxesAmount();
    if (this$taxesAmount == null ? other$taxesAmount != null : !this$taxesAmount.equals(other$taxesAmount)) return false;
    final java.lang.Object this$counterCurrency = this.getCounterCurrency();
    final java.lang.Object other$counterCurrency = other.getCounterCurrency();
    if (this$counterCurrency == null ? other$counterCurrency != null : !this$counterCurrency.equals(other$counterCurrency)) return false;
    final java.lang.Object this$shippingAmount = this.getShippingAmount();
    final java.lang.Object other$shippingAmount = other.getShippingAmount();
    if (this$shippingAmount == null ? other$shippingAmount != null : !this$shippingAmount.equals(other$shippingAmount)) return false;
    final java.lang.Object this$posId = this.getPosId();
    final java.lang.Object other$posId = other.getPosId();
    if (this$posId == null ? other$posId != null : !this$posId.equals(other$posId)) return false;
    final java.lang.Object this$storeId = this.getStoreId();
    final java.lang.Object other$storeId = other.getStoreId();
    if (this$storeId == null ? other$storeId != null : !this$storeId.equals(other$storeId)) return false;
    final java.lang.Object this$deductionSchema = this.getDeductionSchema();
    final java.lang.Object other$deductionSchema = other.getDeductionSchema();
    if (this$deductionSchema == null ? other$deductionSchema != null : !this$deductionSchema.equals(other$deductionSchema)) return false;
    final java.lang.Object this$refunds = this.getRefunds();
    final java.lang.Object other$refunds = other.getRefunds();
    if (this$refunds == null ? other$refunds != null : !this$refunds.equals(other$refunds)) return false;
    final java.lang.Object this$pointOfInteraction = this.getPointOfInteraction();
    final java.lang.Object other$pointOfInteraction = other.getPointOfInteraction();
    if (this$pointOfInteraction == null ? other$pointOfInteraction != null : !this$pointOfInteraction.equals(other$pointOfInteraction)) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof Payment;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = super.hashCode();
    result = result * PRIME + (this.isLiveMode() ? 79 : 97);
    result = result * PRIME + this.getInstallments();
    result = result * PRIME + (this.isCaptured() ? 79 : 97);
    result = result * PRIME + (this.isBinaryMode() ? 79 : 97);
    final java.lang.Object $id = this.getId();
    result = result * PRIME + ($id == null ? 43 : $id.hashCode());
    final java.lang.Object $sponsorId = this.getSponsorId();
    result = result * PRIME + ($sponsorId == null ? 43 : $sponsorId.hashCode());
    final java.lang.Object $collectorId = this.getCollectorId();
    result = result * PRIME + ($collectorId == null ? 43 : $collectorId.hashCode());
    final java.lang.Object $dateCreated = this.getDateCreated();
    result = result * PRIME + ($dateCreated == null ? 43 : $dateCreated.hashCode());
    final java.lang.Object $dateApproved = this.getDateApproved();
    result = result * PRIME + ($dateApproved == null ? 43 : $dateApproved.hashCode());
    final java.lang.Object $dateLastUpdated = this.getDateLastUpdated();
    result = result * PRIME + ($dateLastUpdated == null ? 43 : $dateLastUpdated.hashCode());
    final java.lang.Object $dateOfExpiration = this.getDateOfExpiration();
    result = result * PRIME + ($dateOfExpiration == null ? 43 : $dateOfExpiration.hashCode());
    final java.lang.Object $moneyReleaseDate = this.getMoneyReleaseDate();
    result = result * PRIME + ($moneyReleaseDate == null ? 43 : $moneyReleaseDate.hashCode());
    final java.lang.Object $moneyReleaseSchema = this.getMoneyReleaseSchema();
    result = result * PRIME + ($moneyReleaseSchema == null ? 43 : $moneyReleaseSchema.hashCode());
    final java.lang.Object $operationType = this.getOperationType();
    result = result * PRIME + ($operationType == null ? 43 : $operationType.hashCode());
    final java.lang.Object $issuerId = this.getIssuerId();
    result = result * PRIME + ($issuerId == null ? 43 : $issuerId.hashCode());
    final java.lang.Object $paymentMethodId = this.getPaymentMethodId();
    result = result * PRIME + ($paymentMethodId == null ? 43 : $paymentMethodId.hashCode());
    final java.lang.Object $paymentTypeId = this.getPaymentTypeId();
    result = result * PRIME + ($paymentTypeId == null ? 43 : $paymentTypeId.hashCode());
    final java.lang.Object $status = this.getStatus();
    result = result * PRIME + ($status == null ? 43 : $status.hashCode());
    final java.lang.Object $statusDetail = this.getStatusDetail();
    result = result * PRIME + ($statusDetail == null ? 43 : $statusDetail.hashCode());
    final java.lang.Object $currencyId = this.getCurrencyId();
    result = result * PRIME + ($currencyId == null ? 43 : $currencyId.hashCode());
    final java.lang.Object $description = this.getDescription();
    result = result * PRIME + ($description == null ? 43 : $description.hashCode());
    final java.lang.Object $authorizationCode = this.getAuthorizationCode();
    result = result * PRIME + ($authorizationCode == null ? 43 : $authorizationCode.hashCode());
    final java.lang.Object $integratorId = this.getIntegratorId();
    result = result * PRIME + ($integratorId == null ? 43 : $integratorId.hashCode());
    final java.lang.Object $platformId = this.getPlatformId();
    result = result * PRIME + ($platformId == null ? 43 : $platformId.hashCode());
    final java.lang.Object $corporationId = this.getCorporationId();
    result = result * PRIME + ($corporationId == null ? 43 : $corporationId.hashCode());
    final java.lang.Object $payer = this.getPayer();
    result = result * PRIME + ($payer == null ? 43 : $payer.hashCode());
    final java.lang.Object $metadata = this.getMetadata();
    result = result * PRIME + ($metadata == null ? 43 : $metadata.hashCode());
    final java.lang.Object $additionalInfo = this.getAdditionalInfo();
    result = result * PRIME + ($additionalInfo == null ? 43 : $additionalInfo.hashCode());
    final java.lang.Object $order = this.getOrder();
    result = result * PRIME + ($order == null ? 43 : $order.hashCode());
    final java.lang.Object $externalReference = this.getExternalReference();
    result = result * PRIME + ($externalReference == null ? 43 : $externalReference.hashCode());
    final java.lang.Object $transactionAmount = this.getTransactionAmount();
    result = result * PRIME + ($transactionAmount == null ? 43 : $transactionAmount.hashCode());
    final java.lang.Object $transactionAmountRefunded = this.getTransactionAmountRefunded();
    result = result * PRIME + ($transactionAmountRefunded == null ? 43 : $transactionAmountRefunded.hashCode());
    final java.lang.Object $couponAmount = this.getCouponAmount();
    result = result * PRIME + ($couponAmount == null ? 43 : $couponAmount.hashCode());
    final java.lang.Object $differentialPricingId = this.getDifferentialPricingId();
    result = result * PRIME + ($differentialPricingId == null ? 43 : $differentialPricingId.hashCode());
    final java.lang.Object $transactionDetails = this.getTransactionDetails();
    result = result * PRIME + ($transactionDetails == null ? 43 : $transactionDetails.hashCode());
    final java.lang.Object $feeDetails = this.getFeeDetails();
    result = result * PRIME + ($feeDetails == null ? 43 : $feeDetails.hashCode());
    final java.lang.Object $callForAuthorizeId = this.getCallForAuthorizeId();
    result = result * PRIME + ($callForAuthorizeId == null ? 43 : $callForAuthorizeId.hashCode());
    final java.lang.Object $statementDescriptor = this.getStatementDescriptor();
    result = result * PRIME + ($statementDescriptor == null ? 43 : $statementDescriptor.hashCode());
    final java.lang.Object $card = this.getCard();
    result = result * PRIME + ($card == null ? 43 : $card.hashCode());
    final java.lang.Object $notificationUrl = this.getNotificationUrl();
    result = result * PRIME + ($notificationUrl == null ? 43 : $notificationUrl.hashCode());
    final java.lang.Object $callbackUrl = this.getCallbackUrl();
    result = result * PRIME + ($callbackUrl == null ? 43 : $callbackUrl.hashCode());
    final java.lang.Object $processingMode = this.getProcessingMode();
    result = result * PRIME + ($processingMode == null ? 43 : $processingMode.hashCode());
    final java.lang.Object $merchantAccountId = this.getMerchantAccountId();
    result = result * PRIME + ($merchantAccountId == null ? 43 : $merchantAccountId.hashCode());
    final java.lang.Object $merchantNumber = this.getMerchantNumber();
    result = result * PRIME + ($merchantNumber == null ? 43 : $merchantNumber.hashCode());
    final java.lang.Object $couponCode = this.getCouponCode();
    result = result * PRIME + ($couponCode == null ? 43 : $couponCode.hashCode());
    final java.lang.Object $netAmount = this.getNetAmount();
    result = result * PRIME + ($netAmount == null ? 43 : $netAmount.hashCode());
    final java.lang.Object $paymentMethodOptionId = this.getPaymentMethodOptionId();
    result = result * PRIME + ($paymentMethodOptionId == null ? 43 : $paymentMethodOptionId.hashCode());
    final java.lang.Object $taxes = this.getTaxes();
    result = result * PRIME + ($taxes == null ? 43 : $taxes.hashCode());
    final java.lang.Object $taxesAmount = this.getTaxesAmount();
    result = result * PRIME + ($taxesAmount == null ? 43 : $taxesAmount.hashCode());
    final java.lang.Object $counterCurrency = this.getCounterCurrency();
    result = result * PRIME + ($counterCurrency == null ? 43 : $counterCurrency.hashCode());
    final java.lang.Object $shippingAmount = this.getShippingAmount();
    result = result * PRIME + ($shippingAmount == null ? 43 : $shippingAmount.hashCode());
    final java.lang.Object $posId = this.getPosId();
    result = result * PRIME + ($posId == null ? 43 : $posId.hashCode());
    final java.lang.Object $storeId = this.getStoreId();
    result = result * PRIME + ($storeId == null ? 43 : $storeId.hashCode());
    final java.lang.Object $deductionSchema = this.getDeductionSchema();
    result = result * PRIME + ($deductionSchema == null ? 43 : $deductionSchema.hashCode());
    final java.lang.Object $refunds = this.getRefunds();
    result = result * PRIME + ($refunds == null ? 43 : $refunds.hashCode());
    final java.lang.Object $pointOfInteraction = this.getPointOfInteraction();
    result = result * PRIME + ($pointOfInteraction == null ? 43 : $pointOfInteraction.hashCode());
    return result;
  }
}
